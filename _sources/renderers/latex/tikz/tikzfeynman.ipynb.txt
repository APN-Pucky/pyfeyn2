{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "f32ecc80",
   "metadata": {},
   "source": [
    "# TikZ-Feynman"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d7959cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pyfeyn2.feynmandiagram import FeynmanDiagram, Leg, Propagator, Vertex\n",
    "from pyfeyn2.render.latex.tikzfeynman import TikzFeynmanRender\n",
    "from pyfeyn2.render.latex.dot import feynman_adjust_points\n",
    "import pyfeyn2\n",
    "print(pyfeyn2.__version__)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "891100ba",
   "metadata": {},
   "source": [
    "## Simple Case"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "151afea0",
   "metadata": {},
   "source": [
    "We set the positions of all vertices here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "937fa0bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "fd = FeynmanDiagram()\n",
    "v1 = Vertex(\"v1\").set_xy(-1, 0)\n",
    "v2 = Vertex(\"v2\").set_xy(1, 0)\n",
    "p1 = Propagator(\"p1\").connect(v1, v2).set_type(\"gluon\")\n",
    "l1 = Leg(\"l1\").set_target(v1).set_xy(-2, 1).set_type(\"gluon\").set_incoming()\n",
    "l2 = Leg(\"l2\").set_target(v1).set_xy(-2, -1).set_type(\"gluon\").set_incoming()\n",
    "l3 = Leg(\"l3\").set_target(v2).set_xy(2, 1).set_type(\"gluon\").set_outgoing()\n",
    "l4 = Leg(\"l4\").set_target(v2).set_xy(2, -1).set_type(\"gluon\").set_outgoing()\n",
    "p1.set_source(v1)\n",
    "p1.set_target(v2)\n",
    "fd.propagators.append(p1)\n",
    "fd.vertices.extend([v1, v2])\n",
    "fd.legs.extend([l1, l2, l3, l4])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "a1474ec0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\\documentclass[preview,crop,tikz]{standalone}%\n",
      "\\usepackage[T1]{fontenc}%\n",
      "\\usepackage[utf8]{inputenc}%\n",
      "\\usepackage{lmodern}%\n",
      "\\usepackage{textcomp}%\n",
      "\\usepackage{lastpage}%\n",
      "%\n",
      "\\RequirePackage{luatex85}%\n",
      "\\usepackage[compat=1.1.0]{tikz-feynman}%\n",
      "%\n",
      "\\begin{document}%\n",
      "\\normalsize%\n",
      "\\begin{tikzpicture}\n",
      "\\begin{feynman}\n",
      "\t\\vertex (v1) [] at (-1.0,0.0);\n",
      "\t\\vertex (v2) [] at (1.0,0.0);\n",
      "\t\\vertex (l1) [] at (-2.0,1.0);\n",
      "\t\\vertex (l2) [] at (-2.0,-1.0);\n",
      "\t\\vertex (l3) [] at (2.0,1.0);\n",
      "\t\\vertex (l4) [] at (2.0,-1.0);\n",
      "\t\\diagram*{\n",
      "\t\t(v1) -- [gluon,opacity=,] (v2),\n",
      "\t\t(l1) -- [gluon,opacity=,] (v1),\n",
      "\t\t(l2) -- [gluon,opacity=,] (v1),\n",
      "\t\t(v2) -- [gluon,opacity=,] (l3),\n",
      "\t\t(v2) -- [gluon,opacity=,] (l4),\n",
      "\t};\n",
      "\\end{feynman}\n",
      "\\end{tikzpicture}\n",
      "%\n",
      "\\end{document}\n"
     ]
    }
   ],
   "source": [
    "tfd = TikzFeynmanRender(fd)\n",
    "print(tfd.get_src())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "a7b7739c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<wand.image.Image: a7cc8c2 'PDF' (160x80)>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<wand.image.Image: a7cc8c2 'PDF' (160x80)>"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tfd.render(\"test.pdf\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "99fbd5ba",
   "metadata": {},
   "source": [
    "## Complicated Case"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "62f35db5",
   "metadata": {},
   "source": [
    "We only set the positions of the Legs here."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "dda6bc22",
   "metadata": {},
   "outputs": [],
   "source": [
    "fd = FeynmanDiagram()\n",
    "v1 = Vertex(\"v1\")\n",
    "v2 = Vertex(\"v2\")\n",
    "v3 = Vertex(\"v3\")\n",
    "v4 = Vertex(\"v4\")\n",
    "p1 = Propagator(\"p1\").connect(v1, v2).set_type(\"gluon\")\n",
    "p2 = Propagator(\"p2\").connect(v1, v3).set_type(\"gluon\")\n",
    "p3 = Propagator(\"p3\").connect(v3, v2).set_type(\"gluon\")\n",
    "p4 = Propagator(\"p4\").connect(v4, v3).set_type(\"gluon\")\n",
    "p5 = Propagator(\"p5\").connect(v4, v2).set_type(\"gluon\")\n",
    "l1 = Leg(\"l1\").set_target(v1).set_type(\"gluon\").set_incoming().set_xy(-2, 1)\n",
    "l2 = Leg(\"l2\").set_target(v1).set_type(\"gluon\").set_incoming().set_xy(-2, -1)\n",
    "l3 = Leg(\"l3\").set_target(v2).set_type(\"gluon\").set_outgoing().set_xy(2, -2)\n",
    "l4 = Leg(\"l4\").set_target(v3).set_type(\"gluon\").set_outgoing().set_xy(2, 2)\n",
    "l5 = Leg(\"l5\").set_target(v4).set_type(\"gluon\").set_outgoing().set_xy(2, 1)\n",
    "l6 = Leg(\"l6\").set_target(v4).set_type(\"gluon\").set_outgoing().set_xy(2, -1)\n",
    "\n",
    "fd.propagators.extend([p1, p2, p3, p4, p5])\n",
    "fd.vertices.extend([v1, v2, v3, v4])\n",
    "fd.legs.extend([l1, l2, l3, l4, l5, l6])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8bf8b95c",
   "metadata": {},
   "source": [
    "Now calculate the positions of vertices."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "2cc1456b",
   "metadata": {},
   "outputs": [],
   "source": [
    "ffd= feynman_adjust_points(fd)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "87c4b396",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<wand.image.Image: 278741a 'PDF' (181x181)>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<wand.image.Image: 278741a 'PDF' (181x181)>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "TikzFeynmanRender(ffd).render()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "eb5d9530",
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'pyfeyn2.render.dot'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[8], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mpyfeyn2\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mrender\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mdot\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m DotRender, feynman_to_dot\n\u001b[1;32m      2\u001b[0m fd \u001b[38;5;241m=\u001b[39m FeynmanDiagram()\n\u001b[1;32m      4\u001b[0m v1 \u001b[38;5;241m=\u001b[39m Vertex()\n",
      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'pyfeyn2.render.dot'"
     ]
    }
   ],
   "source": [
    "from pyfeyn2.render.dot import DotRender, feynman_to_dot\n",
    "fd = FeynmanDiagram()\n",
    "\n",
    "v1 = Vertex()\n",
    "v2 = Vertex()\n",
    "v3 = Vertex()\n",
    "v4 = Vertex()\n",
    "v5 = Vertex()\n",
    "v6 = Vertex()\n",
    "\n",
    "p1 = Propagator().connect(v1, v2).set_type(\"gluon\")\n",
    "p2 = Propagator().connect(v2, v3).set_type(\"gluon\")\n",
    "p3 = Propagator().connect(v1, v4).set_type(\"gluon\")\n",
    "p4 = Propagator().connect(v2, v5).set_type(\"gluon\")\n",
    "p5 = Propagator().connect(v3, v6).set_type(\"gluon\")\n",
    "p6 = Propagator().connect(v5, v6).set_type(\"gluon\")\n",
    "p7 = Propagator().connect(v4, v5).set_type(\"gluon\")\n",
    "p8 = Propagator().connect(v4, v6).set_type(\"gluon\")\n",
    "\n",
    "l1 = Leg().set_target(v1).set_type(\"gluon\").set_incoming().set_xy(-2, 0)\n",
    "l2 = Leg().set_target(v3).set_type(\"gluon\").set_outgoing().set_xy(2, 0)\n",
    "\n",
    "fd.propagators.extend([p1, p2, p3, p4, p5, p6, p7, p8])\n",
    "fd.vertices.extend([v1, v2, v3, v4, v5, v6])\n",
    "fd.legs.extend([l1, l2])\n",
    "print(feynman_to_dot(fd))\n",
    "ffd= feynman_adjust_points(fd)\n",
    "TikzFeynmanRender(ffd).render()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b1c8fd6",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
