:py:mod:`pyfeyn2`
=================

.. py:module:: pyfeyn2


Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   render/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   feynmandiagram/index.rst
   mkfeyndiag/index.rst
   particles/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   pyfeyn2.ASCIIRender
   pyfeyn2.DotRender
   pyfeyn2.FeynmpRender
   pyfeyn2.MPLRender
   pyfeyn2.PyxRender
   pyfeyn2.TikzFeynmanRender




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyfeyn2.renders
   pyfeyn2.styles
   pyfeyn2.types
   pyfeyn2.attributes


.. py:class:: ASCIIRender(fd=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.render.Render`

   Renders Feynman diagrams to ASCII art.

   .. py:method:: render(file=None, show=True, resolution=100, width=None, height=None)


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_type(typ: str) -> bool



.. py:class:: DotRender(fd=None, documentclass='standalone', document_options=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.latex.LatexRender`

   A class that contains a full LaTeX document.

   If needed, you can append stuff to the preamble or the packages.
   For instance, if you need to use ``\maketitle`` you can add the title,
   author and date commands to the preamble to make it work.


   :param default_filepath: The default path to save files.
   :type default_filepath: str
   :param documentclass: The LaTeX class of the document.
   :type documentclass: str or `~.Command`
   :param document_options: The options to supply to the documentclass
   :type document_options: str or `list`
   :param fontenc: The option for the fontenc package. If it is `None`, the fontenc
                   package will not be loaded at all.
   :type fontenc: str
   :param inputenc: The option for the inputenc package. If it is `None`, the inputenc
                    package will not be loaded at all.
   :type inputenc: str
   :param font_size: The font size to declare as normalsize
   :type font_size: str
   :param lmodern: Use the Latin Modern font. This is a font that contains more glyphs
                   than the standard LaTeX font.
   :type lmodern: bool
   :param textcomp: Adds even more glyphs, for instance the Euro (€) sign.
   :type textcomp: bool
   :param page_numbers: Adds the ability to add the last page to the document.
   :type page_numbers: bool
   :param indent: Determines whether or not the document requires indentation. If it
                  is `None` it will use the value from the active config. Which is
                  `True` by default.
   :type indent: bool
   :param geometry_options: The options to supply to the geometry package
   :type geometry_options: dict
   :param data: Initial content of the document.
   :type data: list

   .. py:method:: set_feynman_diagram(fd)


   .. py:method:: get_src_dot()


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_type(typ)



.. py:class:: FeynmpRender(fd=None, documentclass='standalone', document_options=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.metapost.MetaPostRender`

   A class that contains a full LaTeX document.

   If needed, you can append stuff to the preamble or the packages.
   For instance, if you need to use ``\maketitle`` you can add the title,
   author and date commands to the preamble to make it work.


   :param default_filepath: The default path to save files.
   :type default_filepath: str
   :param documentclass: The LaTeX class of the document.
   :type documentclass: str or `~.Command`
   :param document_options: The options to supply to the documentclass
   :type document_options: str or `list`
   :param fontenc: The option for the fontenc package. If it is `None`, the fontenc
                   package will not be loaded at all.
   :type fontenc: str
   :param inputenc: The option for the inputenc package. If it is `None`, the inputenc
                    package will not be loaded at all.
   :type inputenc: str
   :param font_size: The font size to declare as normalsize
   :type font_size: str
   :param lmodern: Use the Latin Modern font. This is a font that contains more glyphs
                   than the standard LaTeX font.
   :type lmodern: bool
   :param textcomp: Adds even more glyphs, for instance the Euro (€) sign.
   :type textcomp: bool
   :param page_numbers: Adds the ability to add the last page to the document.
   :type page_numbers: bool
   :param indent: Determines whether or not the document requires indentation. If it
                  is `None` it will use the value from the active config. Which is
                  `True` by default.
   :type indent: bool
   :param geometry_options: The options to supply to the geometry package
   :type geometry_options: dict
   :param data: Initial content of the document.
   :type data: list

   .. py:method:: set_feynman_diagram(fd)


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_type(typ: str)



.. py:class:: MPLRender(fd=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.render.Render`

   .. py:method:: render(file=None, show=True, width=None, height=None, resolution=100)


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_type(typ: str) -> bool



.. py:class:: PyxRender(fd=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.render.Render`

   .. py:method:: render(file=None, show=True, resolution=200, width=None, height=None)


   .. py:method:: apply_layout(stylestring, obj)

      Apply the decorators encoded in a style string to an object.


   .. py:method:: valid_type(typ: str)


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_style(style: str) -> bool



.. py:class:: TikzFeynmanRender(fd=None, documentclass='standalone', document_options=None, *args, **kwargs)

   Bases: :py:obj:`pyfeyn2.render.latex.LatexRender`

   A class that contains a full LaTeX document.

   If needed, you can append stuff to the preamble or the packages.
   For instance, if you need to use ``\maketitle`` you can add the title,
   author and date commands to the preamble to make it work.


   :param default_filepath: The default path to save files.
   :type default_filepath: str
   :param documentclass: The LaTeX class of the document.
   :type documentclass: str or `~.Command`
   :param document_options: The options to supply to the documentclass
   :type document_options: str or `list`
   :param fontenc: The option for the fontenc package. If it is `None`, the fontenc
                   package will not be loaded at all.
   :type fontenc: str
   :param inputenc: The option for the inputenc package. If it is `None`, the inputenc
                    package will not be loaded at all.
   :type inputenc: str
   :param font_size: The font size to declare as normalsize
   :type font_size: str
   :param lmodern: Use the Latin Modern font. This is a font that contains more glyphs
                   than the standard LaTeX font.
   :type lmodern: bool
   :param textcomp: Adds even more glyphs, for instance the Euro (€) sign.
   :type textcomp: bool
   :param page_numbers: Adds the ability to add the last page to the document.
   :type page_numbers: bool
   :param indent: Determines whether or not the document requires indentation. If it
                  is `None` it will use the value from the active config. Which is
                  `True` by default.
   :type indent: bool
   :param geometry_options: The options to supply to the geometry package
   :type geometry_options: dict
   :param data: Initial content of the document.
   :type data: list

   .. py:method:: set_feynman_diagram(fd)


   .. py:method:: valid_attribute(attr: str) -> bool


   .. py:method:: valid_type(typ)



.. py:data:: renders
   

   

.. py:data:: styles
   :annotation: = ['arrow-pos', 'parallel-arrow-sense', 'parallel-arrow-displace']

   

.. py:data:: types
   :annotation: = ['fermion', 'boson', 'vector', 'scalar', 'photon', 'higgs', 'gluon', 'ghost', 'graviton',...

   

.. py:data:: attributes
   :annotation: = ['x', 'y', 'bend', 'label', 'pdgid', 'sense', 'target', 'source', 'style', 'id', 'type', 'text']

   

