:py:mod:`pyfeyn2.feynmandiagram`
================================

.. py:module:: pyfeyn2.feynmandiagram


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   pyfeyn2.feynmandiagram.Identifiable
   pyfeyn2.feynmandiagram.PDG
   pyfeyn2.feynmandiagram.Labeled
   pyfeyn2.feynmandiagram.Texted
   pyfeyn2.feynmandiagram.Point
   pyfeyn2.feynmandiagram.CSSStringConverter
   pyfeyn2.feynmandiagram.CSSSheetConverter
   pyfeyn2.feynmandiagram.Styled
   pyfeyn2.feynmandiagram.Bending
   pyfeyn2.feynmandiagram.Targeting
   pyfeyn2.feynmandiagram.Sourcing
   pyfeyn2.feynmandiagram.Line
   pyfeyn2.feynmandiagram.Vertex
   pyfeyn2.feynmandiagram.Connector
   pyfeyn2.feynmandiagram.Leg
   pyfeyn2.feynmandiagram.Propagator
   pyfeyn2.feynmandiagram.Label
   pyfeyn2.feynmandiagram.FeynmanDiagram
   pyfeyn2.feynmandiagram.Meta
   pyfeyn2.feynmandiagram.Head
   pyfeyn2.feynmandiagram.FeynML




Attributes
~~~~~~~~~~

.. autoapisummary::

   pyfeyn2.feynmandiagram.global_id
   pyfeyn2.feynmandiagram.CSSString
   pyfeyn2.feynmandiagram.CSSSheet
   pyfeyn2.feynmandiagram.aliasMeta


.. py:data:: global_id
   :annotation: = 0

   

.. py:class:: Identifiable

   .. py:attribute:: id
      :annotation: :Optional[str]

      

   .. py:attribute:: id2
      :annotation: :Optional[str]

      

   .. py:method:: __post_init__()



.. py:class:: PDG

   Bases: :py:obj:`Identifiable`

   .. py:attribute:: pdgid
      :annotation: :Optional[int]

      

   .. py:attribute:: name
      :annotation: :Optional[str]

      

   .. py:attribute:: type
      :annotation: :Optional[str]

      

   .. py:attribute:: particle
      :annotation: :Optional[particle.Particle]

      

   .. py:method:: _sync()

      Sync the particle with the pdgid, name etc.


   .. py:method:: __post_init__()


   .. py:method:: set_pdgig(*args, **kwargs)


   .. py:method:: set_type(*args, **kwargs)


   .. py:method:: set_name(*args, **kwargs)



.. py:class:: Labeled

   .. py:attribute:: label
      :annotation: :Optional[str]

      

   .. py:method:: set_label(*args, **kwargs)



.. py:class:: Texted

   .. py:attribute:: text
      :annotation: :Optional[str]

      

   .. py:method:: set_text(*args, **kwargs)



.. py:class:: Point

   .. py:attribute:: x
      :annotation: :Optional[float]

      

   .. py:attribute:: y
      :annotation: :Optional[float]

      

   .. py:attribute:: z
      :annotation: :Optional[float]

      

   .. py:method:: with_point(p)


   .. py:method:: with_xy(x, y)


   .. py:method:: with_xyz(x, y, z)


   .. py:method:: set_point(*args, **kwargs)


   .. py:method:: set_xy(*args, **kwargs)


   .. py:method:: set_xyz(*args, **kwargs)



.. py:data:: CSSString
   

   

.. py:data:: CSSSheet
   

   

.. py:class:: CSSStringConverter

   Bases: :py:obj:`xsdata.formats.converter.Converter`

   Abstract converter class.

   .. py:method:: deserialize(value: str, **kwargs) -> CSSString
      :staticmethod:

      Convert any type to the converter dedicated type.

      :raises ConverterError: if converter fails with and expected ValueError


   .. py:method:: serialize(value: CSSString, **kwargs) -> str
      :staticmethod:

      Convert value to string.



.. py:class:: CSSSheetConverter

   Bases: :py:obj:`xsdata.formats.converter.Converter`

   Abstract converter class.

   .. py:method:: deserialize(value: str, **kwargs) -> CSSSheet
      :staticmethod:

      Convert any type to the converter dedicated type.

      :raises ConverterError: if converter fails with and expected ValueError


   .. py:method:: serialize(value: CSSSheet, **kwargs) -> str
      :staticmethod:

      Convert value to string.



.. py:class:: Styled

   .. py:attribute:: style
      :annotation: :CSSString

      

   .. py:attribute:: clazz
      :annotation: :Optional[str]

      

   .. py:method:: raw_style()


   .. py:method:: put_style(key, value)


   .. py:method:: with_style(style)


   .. py:method:: with_class(clazz)



.. py:class:: Bending

   .. py:attribute:: bend
      :annotation: :Optional[float]

      


.. py:class:: Targeting

   .. py:attribute:: target
      :annotation: :Optional[str]

      

   .. py:method:: with_target(target)


   .. py:method:: set_target(*args, **kwargs)



.. py:class:: Sourcing

   .. py:attribute:: source
      :annotation: :Optional[str]

      

   .. py:method:: with_source(source)


   .. py:method:: set_source(*args, **kwargs)



.. py:class:: Line

   Bases: :py:obj:`Targeting`, :py:obj:`Sourcing`

   .. py:method:: connect(source, target)



.. py:class:: Vertex

   Bases: :py:obj:`Labeled`, :py:obj:`Point`, :py:obj:`Styled`, :py:obj:`Identifiable`


.. py:class:: Connector

   Bases: :py:obj:`Labeled`, :py:obj:`Bending`, :py:obj:`Styled`, :py:obj:`PDG`

   .. py:attribute:: momentum
      :annotation: :Optional[str]

      

   .. py:attribute:: tension
      :annotation: :Optional[float]

      

   .. py:attribute:: length
      :annotation: :Optional[float]

      

   .. py:method:: set_momentum(*args, **kwargs)


   .. py:method:: set_tension(*args, **kwargs)


   .. py:method:: set_length(*args, **kwargs)



.. py:class:: Leg

   Bases: :py:obj:`Point`, :py:obj:`Targeting`, :py:obj:`Connector`

   .. py:attribute:: sense
      :annotation: :str

      

   .. py:attribute:: external
      :annotation: :Optional[str]

      

   .. py:method:: with_incoming()


   .. py:method:: with_outgoing()


   .. py:method:: set_external(*args, **kwargs)


   .. py:method:: set_incoming(*args, **kwargs)


   .. py:method:: set_outgoing(*args, **kwargs)



.. py:class:: Propagator

   Bases: :py:obj:`Line`, :py:obj:`Connector`


.. py:class:: Label

   Bases: :py:obj:`Point`, :py:obj:`Texted`, :py:obj:`Identifiable`


.. py:class:: FeynmanDiagram

   .. py:class:: Meta

      .. py:attribute:: name
         :annotation: = diagram

         


   .. py:attribute:: propagators
      :annotation: :List[Propagator]

      

   .. py:attribute:: vertices
      :annotation: :List[Vertex]

      

   .. py:attribute:: legs
      :annotation: :List[Leg]

      

   .. py:attribute:: labels
      :annotation: :List[Label]

      

   .. py:attribute:: sheet
      :annotation: :CSSSheet

      

   .. py:method:: add(*fd_all: List[Union[Propagator, Vertex, Leg, Label]])


   .. py:method:: get_vertex(id)


   .. py:method:: get_connections(vertex)


   .. py:method:: remove_propagator(propagator)


   .. py:method:: get_bounding_box()


   .. py:method:: add_rule(rule: str)


   .. py:method:: add_rules(rules: str)


   .. py:method:: with_rule(rule: str)


   .. py:method:: with_rules(rules: str)


   .. py:method:: _get_rule_style(selectorText: str) -> cssutils.css.CSSStyleDeclaration


   .. py:method:: _get_class_style(obj: Styled) -> cssutils.css.CSSStyleDeclaration


   .. py:method:: get_style(obj) -> cssutils.css.CSSStyleDeclaration

      Get the style of an object.

      This is prefered over accessing the style attribute directly, sicne it includes class and pdgid definitions.



.. py:class:: Meta

   .. py:class:: Meta

      .. py:attribute:: name
         :annotation: = meta

         


   .. py:attribute:: name
      :annotation: :Optional[str]

      

   .. py:attribute:: value
      :annotation: :Optional[str]

      


.. py:data:: aliasMeta
   

   

.. py:class:: Head

   .. py:class:: Meta

      .. py:attribute:: name
         :annotation: = head

         


   .. py:attribute:: metas
      :annotation: :List[aliasMeta]

      

   .. py:attribute:: description
      :annotation: :Optional[str]

      


.. py:class:: FeynML

   .. py:class:: Meta

      .. py:attribute:: name
         :annotation: = feynml

         


   .. py:attribute:: head
      :annotation: :List[Head]

      

   .. py:attribute:: diagrams
      :annotation: :List[FeynmanDiagram]

      

   .. py:method:: get_diagram(id)



