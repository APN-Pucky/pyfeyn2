{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "e6727008",
   "metadata": {},
   "source": [
    "## Write FeynmanDiagram"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c94293d",
   "metadata": {},
   "source": [
    "Convenient saving and loading of style independent feynman diagrams as XML or FeynML."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8fe30ac6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from xsdata.formats.dataclass.parsers import XmlParser\n",
    "from xsdata.formats.dataclass.serializers import XmlSerializer\n",
    "from xsdata.formats.dataclass.serializers.config import SerializerConfig\n",
    "\n",
    "from pyfeyn2.feynmandiagram import (\n",
    "    FeynmanDiagram,\n",
    "    FeynML,\n",
    "    Head,\n",
    "    Leg,\n",
    "    Meta,\n",
    "    Propagator,\n",
    "    Vertex,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "48bb6b54",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
      "<diagram>\n",
      "  <propagator id=\"p1\" style=\"\" pdgid=\"21\" type=\"\" source=\"v1\" target=\"v2\"/>\n",
      "  <vertex id=\"v1\" style=\"\"/>\n",
      "  <vertex id=\"v2\" style=\"\"/>\n",
      "  <leg id=\"l1\" style=\"\" pdgid=\"21\" type=\"\" target=\"\" sense=\"\"/>\n",
      "</diagram>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fd = FeynmanDiagram()\n",
    "v1 = Vertex(\"v1\")\n",
    "v2 = Vertex(\"v2\")\n",
    "p1 = Propagator(\"p1\")\n",
    "l1 = Leg(\"l1\")\n",
    "p1.set_source(v1)\n",
    "p1.set_target(v2)\n",
    "fd.propagators.append(p1)\n",
    "fd.vertices.append(v1)\n",
    "fd.vertices.append(v2)\n",
    "fd.legs.append(l1)\n",
    "\n",
    "config = SerializerConfig(pretty_print=True)\n",
    "serializer = XmlSerializer(config=config)\n",
    "print(serializer.render(fd))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0077a833",
   "metadata": {},
   "source": [
    "## Write FeynML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "de4d72df",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n",
      "<feynml>\n",
      "  <head>\n",
      "    <meta name=\"pyfeyn2\" value=\"test\"/>\n",
      "    <description>Simple single test diagram</description>\n",
      "  </head>\n",
      "  <diagram>\n",
      "    <propagator id=\"p1\" style=\"\" pdgid=\"21\" type=\"\" source=\"v1\" target=\"v2\"/>\n",
      "    <vertex id=\"v1\" style=\"\"/>\n",
      "    <vertex id=\"v2\" style=\"\"/>\n",
      "    <leg id=\"l1\" style=\"\" pdgid=\"21\" type=\"\" target=\"\" sense=\"\"/>\n",
      "  </diagram>\n",
      "</feynml>\n",
      "\n"
     ]
    }
   ],
   "source": [
    "fml = FeynML(\n",
    "        head=Head(\n",
    "            metas=Meta(name=\"pyfeyn2\", value=\"test\"),\n",
    "            description=\"Simple single test diagram\",\n",
    "        ),\n",
    "        diagrams=fd,\n",
    "    )\n",
    "\n",
    "config = SerializerConfig(pretty_print=True)\n",
    "serializer = XmlSerializer(config=config)\n",
    "print(serializer.render(fml))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a84a35de",
   "metadata": {},
   "source": [
    "## Read FeynML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "84801155",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "FeynML(head=[Head(metas=[Meta(name='creator', value='PyFeyn')], description='\\n   A sample diagram showing a QCD correction to the Drell-Yan process.\\n   ')], diagrams=[FeynmanDiagram(propagators=[Propagator(id='P2', style=cssutils.css.CSSStyleDeclaration(cssText=''), pdgid=21, type='photon', latexname=None, bend=None, label='Z', momentum=None, tension=None, length=None, source='V0', target='V1'), Propagator(id='P4', style=cssutils.css.CSSStyleDeclaration(cssText=''), pdgid=21, type='fermion', latexname=None, bend=None, label=None, momentum=None, tension=None, length=None, source='V5', target='V1'), Propagator(id='P5', style=cssutils.css.CSSStyleDeclaration(cssText=''), pdgid=21, type='fermion', latexname=None, bend=None, label=None, momentum=None, tension=None, length=None, source='V1', target='V6'), Propagator(id='P7', style=cssutils.css.CSSStyleDeclaration(cssText='parallel-arrow-displace: 0.2'), pdgid=21, type='gluon', latexname=None, bend=0.5, label='g', momentum=None, tension=None, length=None, source='V5', target='V6')], vertices=[Vertex(id='V0', style=cssutils.css.CSSStyleDeclaration(cssText=''), x=-2.0, y=0.0, z=None, label=None), Vertex(id='V1', style=cssutils.css.CSSStyleDeclaration(cssText=''), x=2.0, y=0.0, z=None, label=None), Vertex(id='V5', style=cssutils.css.CSSStyleDeclaration(cssText=''), x=3.0, y=-1.0, z=None, label=None), Vertex(id='V6', style=cssutils.css.CSSStyleDeclaration(cssText=''), x=3.0, y=1.0, z=None, label=None)], legs=[Leg(id='E0', style=cssutils.css.CSSStyleDeclaration(cssText='arrow-pos: 0.53'), pdgid=21, type='fermion', latexname=None, bend=None, label='e-', momentum=None, tension=None, length=None, target='V0', x=-4.0, y=2.0, z=None, sense='incoming'), Leg(id='E1', style=cssutils.css.CSSStyleDeclaration(cssText='arrow-pos: 0.53; parallel-arrow-displace: -0.06; parallel-arrow-sense: -1'), pdgid=21, type='fermion', latexname=None, bend=None, label='e+', momentum=None, tension=None, length=None, target='V0', x=-4.0, y=-2.0, z=None, sense='outgoing'), Leg(id='E2', style=cssutils.css.CSSStyleDeclaration(cssText='arrow-pos: 0.53; parallel-arrow-displace: -0.06; parallel-arrow-sense: -1'), pdgid=21, type='fermion', latexname=None, bend=None, label='q+', momentum=None, tension=None, length=None, target='V5', x=4.0, y=-2.0, z=None, sense='incoming'), Leg(id='E3', style=cssutils.css.CSSStyleDeclaration(cssText='arrow-pos: 0.53'), pdgid=21, type='fermion', latexname=None, bend=None, label='q-', momentum=None, tension=None, length=None, target='V6', x=4.0, y=2.0, z=None, sense='outgoing')], labels=[Label(id='L0', text='Drell-Yan QCD vertex correction', x=0.0, y=2.0, z=None)])])\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<wand.image.Image: 7625005 'PDF' (630x315)>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "from pyfeyn2.render.pyx.pyxrender import PyxRender\n",
    "\n",
    "xml_string = Path(\"test.fml\").read_text()\n",
    "parser = XmlParser()\n",
    "fml = parser.from_string(xml_string, FeynML)\n",
    "print(fml)\n",
    "wimg = PyxRender(fml.diagrams[0]).render()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c792aa32",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  },
  "vscode": {
   "interpreter": {
    "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
